//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use crate::backends::POSTGRES_DB;
use passwords_rs::PasswordHash;
use sqlx::{ColumnIndex, Database, Error, FromRow};
use std::ops::Deref;
use rust_iam::{EngineTrait, PolicyCollection};
use ss::types::Username;

#[derive(Clone, Debug, PartialEq, Eq, FromRow)]
pub struct UserRecord<Engine: EngineTrait> {
    pub username: Username,
    pub password: PasswordHash,
    pub policies: PolicyCollection<Engine>,
}
impl<Engine: EngineTrait> Unpin for UserRecord<Engine> {}
impl<Engine: rust_iam::EngineTrait> UserRecord<Engine> {
    pub async fn get(username: &str) -> Result<Self, sqlx::Error> {
        let db = &*POSTGRES_DB.get().await;
        sqlx::query_as::<_, UserRecord<Engine>>(
            "SELECT * FROM get_user_policies_by_username($1)")
            .bind(username)
            .fetch_one(db)
            .await
    }
}

#[cfg(test)]
mod tests {
    use crate::backends::UserRecord;
    use ss::permissions::DefaultEngine;

    #[tokio::test]
    async fn list_policies() {
        assert!(UserRecord::<DefaultEngine>::get("Ali").await.is_ok());
    }
}
